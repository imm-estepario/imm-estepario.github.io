name: Build, Deploy, and Publish Docker image

on:
  push:
    branches: main
  pull_request:
    branches: main
  release:
    types: [published]

env:
  REGISTRY_IMAGE: erfianugrah/revista-4

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.get_tag.outputs.NEW_TAG }}
    steps:
    - name: Get latest tag and increment
      id: get_tag
      run: |
        # Fetch all tags and sort them
        echo "Fetching tags for ${REGISTRY_IMAGE}..."
        TAGS_JSON=$(curl -s "https://hub.docker.com/v2/repositories/${REGISTRY_IMAGE}/tags/?page_size=100")
        echo "Fetched tags JSON:"
        echo "$TAGS_JSON" | jq '.'
        
        ALL_TAGS=$(echo "$TAGS_JSON" | jq -r '.results[].name' | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
        echo "Sorted semantic version tags:"
        echo "$ALL_TAGS"
        
        if [ -z "$ALL_TAGS" ]; then
          echo "No existing semantic version tags found."
          NEW_TAG="0.0.1"
        else
          LATEST_TAG=$(echo "$ALL_TAGS" | tail -n 1)
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix if present
          LATEST_TAG=${LATEST_TAG#v}
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          
          # Increment the patch version
          PATCH=$((PATCH+1))
          
          NEW_TAG="${MAJOR}.${MINOR}.${PATCH}"
          
          # Check if the new tag already exists
          while echo "$ALL_TAGS" | grep -q "^v?${NEW_TAG}$"; do
            PATCH=$((PATCH+1))
            NEW_TAG="${MAJOR}.${MINOR}.${PATCH}"
          done
        fi
        
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "New tag: $NEW_TAG"

  bun-build:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .astro
            dist
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}-${{ hashFiles('src/**') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}-
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build with Bun
        run: bun run build

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 7

  deploy:
    needs: bun-build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "revista-3"
          entrypoint: "https://deno.land/std@0.188.0/http/file_server.ts"
          root: "dist"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=revista-4
          wranglerVersion: '3.68.0'
          packageManager: bun

  docker-build:
      needs: [prepare, deploy]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        
        - name: Download built artifacts
          uses: actions/download-artifact@v4
          with:
            name: dist
            path: dist
        
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
        
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        
        - name: Cache Docker layers
          uses: actions/cache@v4
          with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
            restore-keys: |
              ${{ runner.os }}-buildx-
        
        - name: Build and push
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./Dockerfile
            platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
            push: true
            tags: |
              ${{ env.REGISTRY_IMAGE }}:${{ needs.prepare.outputs.new_tag }}
              ${{ env.REGISTRY_IMAGE }}:latest
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
        - name: Move cache
          run: |
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache

        - name: Inspect image
          run: |
            docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ needs.prepare.outputs.new_tag }}
